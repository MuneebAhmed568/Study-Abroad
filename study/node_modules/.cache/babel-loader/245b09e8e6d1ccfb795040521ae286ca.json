{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { CID } from 'multiformats/cid';\nimport { bases } from 'multiformats/basics';\nimport { base58btc } from 'multiformats/bases/base58';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport errcode from 'err-code';\nimport { symbol } from '@libp2p/interface-peer-id';\nconst baseDecoder = Object.values(bases).map(codec => codec.decoder) // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n.reduce((acc, curr) => acc.or(curr), bases.identity.decoder); // these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\n\nconst LIBP2P_KEY_CODE = 0x72;\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37;\n\nclass PeerIdImpl {\n  constructor(init) {\n    this.type = init.type;\n    this.multihash = init.multihash;\n    this.privateKey = init.privateKey; // mark string cache as non-enumerable\n\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return `PeerId(${this.toString()})`;\n  }\n\n  get [symbol]() {\n    return true;\n  }\n\n  toString() {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1);\n    }\n\n    return this.string;\n  } // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n\n\n  toCID() {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash);\n  }\n\n  toBytes() {\n    return this.multihash.bytes;\n  }\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n\n\n  equals(id) {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id);\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this);\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes);\n    } else {\n      throw new Error('not valid Id');\n    }\n  }\n\n}\n\nclass RSAPeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({ ...init,\n      type: 'RSA'\n    });\n    this.type = 'RSA';\n    this.publicKey = init.publicKey;\n  }\n\n}\n\nclass Ed25519PeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({ ...init,\n      type: 'Ed25519'\n    });\n    this.type = 'Ed25519';\n    this.publicKey = init.multihash.digest;\n  }\n\n}\n\nclass Secp256k1PeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({ ...init,\n      type: 'secp256k1'\n    });\n    this.type = 'secp256k1';\n    this.publicKey = init.multihash.digest;\n  }\n\n}\n\nexport function createPeerId(init) {\n  return new PeerIdImpl(init);\n}\nexport function peerIdFromPeerId(other) {\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other);\n  }\n\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other);\n  }\n\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other);\n  }\n\n  throw errcode(new Error('Not a PeerId'), 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromString(str, decoder) {\n  decoder = decoder ?? baseDecoder;\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`));\n\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({\n        multihash\n      });\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({\n        multihash\n      });\n    } else {\n      return new RSAPeerIdImpl({\n        multihash\n      });\n    }\n  }\n\n  return peerIdFromBytes(baseDecoder.decode(str));\n}\nexport function peerIdFromBytes(buf) {\n  try {\n    const multihash = Digest.decode(buf);\n\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({\n          multihash\n        });\n      } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({\n          multihash\n        });\n      }\n    }\n\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({\n        multihash\n      });\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf));\n  }\n\n  throw new Error('Supplied PeerID CID is invalid');\n}\nexport function peerIdFromCID(cid) {\n  if (cid == null || cid.multihash == null || cid.version == null || cid.version === 1 && cid.code !== LIBP2P_KEY_CODE) {\n    throw new Error('Supplied PeerID CID is invalid');\n  }\n\n  const multihash = cid.multihash;\n\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({\n      multihash: cid.multihash\n    });\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({\n        multihash: cid.multihash\n      });\n    } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({\n        multihash: cid.multihash\n      });\n    }\n  }\n\n  throw new Error('Supplied PeerID CID is invalid');\n}\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\n\nexport async function peerIdFromKeys(publicKey, privateKey) {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({\n      multihash: Digest.create(identity.code, publicKey),\n      privateKey\n    });\n  }\n\n  if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({\n      multihash: Digest.create(identity.code, publicKey),\n      privateKey\n    });\n  }\n\n  return new RSAPeerIdImpl({\n    multihash: await sha256.digest(publicKey),\n    publicKey,\n    privateKey\n  });\n}","map":{"version":3,"mappings":"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","names":["CID","bases","base58btc","Digest","identity","equals","uint8ArrayEquals","sha256","errcode","symbol","baseDecoder","Object","values","map","codec","decoder","reduce","acc","curr","or","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","PeerIdImpl","constructor","init","type","multihash","privateKey","defineProperty","enumerable","writable","Symbol","toStringTag","toString","string","encode","bytes","slice","toCID","createV1","toBytes","toJSON","id","Uint8Array","peerIdFromString","Error","RSAPeerIdImpl","publicKey","Ed25519PeerIdImpl","digest","Secp256k1PeerIdImpl","createPeerId","peerIdFromPeerId","other","str","charAt","decode","startsWith","peerIdFromBytes","buf","code","length","peerIdFromCID","cid","version","peerIdFromKeys","create"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}