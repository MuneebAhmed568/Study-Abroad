{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport isRegexp from 'is-regexp';\nconst flagMap = {\n  global: 'g',\n  ignoreCase: 'i',\n  multiline: 'm',\n  dotAll: 's',\n  sticky: 'y',\n  unicode: 'u'\n};\nexport default function clonedRegexp(regexp, options = {}) {\n  if (!isRegexp(regexp)) {\n    throw new TypeError('Expected a RegExp instance');\n  }\n\n  const flags = Object.keys(flagMap).map(flag => (typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : '').join('');\n  const clonedRegexp = new RegExp(options.source || regexp.source, flags);\n  clonedRegexp.lastIndex = typeof options.lastIndex === 'number' ? options.lastIndex : regexp.lastIndex;\n  return clonedRegexp;\n}","map":{"version":3,"sources":["/Users/madukadu/Github/Study abroad/studyabroad/study/node_modules/clone-regexp/index.js"],"names":["isRegexp","flagMap","global","ignoreCase","multiline","dotAll","sticky","unicode","clonedRegexp","regexp","options","TypeError","flags","Object","keys","map","flag","join","RegExp","source","lastIndex"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA,MAAMC,OAAO,GAAG;AACfC,EAAAA,MAAM,EAAE,GADO;AAEfC,EAAAA,UAAU,EAAE,GAFG;AAGfC,EAAAA,SAAS,EAAE,GAHI;AAIfC,EAAAA,MAAM,EAAE,GAJO;AAKfC,EAAAA,MAAM,EAAE,GALO;AAMfC,EAAAA,OAAO,EAAE;AANM,CAAhB;AASA,eAAe,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,OAAO,GAAG,EAAxC,EAA4C;AAC1D,MAAI,CAACV,QAAQ,CAACS,MAAD,CAAb,EAAuB;AACtB,UAAM,IAAIE,SAAJ,CAAc,4BAAd,CAAN;AACA;;AAED,QAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYb,OAAZ,EAAqBc,GAArB,CAAyBC,IAAI,IAC1C,CAAC,OAAON,OAAO,CAACM,IAAD,CAAd,KAAyB,SAAzB,GAAqCN,OAAO,CAACM,IAAD,CAA5C,GAAqDP,MAAM,CAACO,IAAD,CAA5D,IAAsEf,OAAO,CAACe,IAAD,CAA7E,GAAsF,EADzE,EAEXC,IAFW,CAEN,EAFM,CAAd;AAIA,QAAMT,YAAY,GAAG,IAAIU,MAAJ,CAAWR,OAAO,CAACS,MAAR,IAAkBV,MAAM,CAACU,MAApC,EAA4CP,KAA5C,CAArB;AAEAJ,EAAAA,YAAY,CAACY,SAAb,GAAyB,OAAOV,OAAO,CAACU,SAAf,KAA6B,QAA7B,GACxBV,OAAO,CAACU,SADgB,GAExBX,MAAM,CAACW,SAFR;AAIA,SAAOZ,YAAP;AACA","sourcesContent":["import isRegexp from 'is-regexp';\n\nconst flagMap = {\n\tglobal: 'g',\n\tignoreCase: 'i',\n\tmultiline: 'm',\n\tdotAll: 's',\n\tsticky: 'y',\n\tunicode: 'u'\n};\n\nexport default function clonedRegexp(regexp, options = {}) {\n\tif (!isRegexp(regexp)) {\n\t\tthrow new TypeError('Expected a RegExp instance');\n\t}\n\n\tconst flags = Object.keys(flagMap).map(flag => (\n\t\t(typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : ''\n\t)).join('');\n\n\tconst clonedRegexp = new RegExp(options.source || regexp.source, flags);\n\n\tclonedRegexp.lastIndex = typeof options.lastIndex === 'number' ?\n\t\toptions.lastIndex :\n\t\tregexp.lastIndex;\n\n\treturn clonedRegexp;\n}\n"]},"metadata":{},"sourceType":"module"}