{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\n\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\nconst P2P_CODES = [getProtocol('p2p').code, getProtocol('ipfs').code];\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n */\n\nexport function fromNodeAddress(addr, transport) {\n  if (addr == null) {\n    throw new Error('requires node address object');\n  }\n\n  if (transport == null) {\n    throw new Error('requires transport protocol');\n  }\n\n  let ip;\n\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4';\n      break;\n\n    case 6:\n      ip = 'ip6';\n      break;\n\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.');\n  }\n\n  return new DefaultMultiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a Multiaddr that is a name\n */\n\nexport function isName(addr) {\n  if (!isMultiaddr(addr)) {\n    return false;\n  } // if a part of the multiaddr is resolvable, then return true\n\n\n  return addr.protos().some(proto => proto.resolvable);\n}\n/**\n * Check if object is a CID instance\n */\n\nexport function isMultiaddr(value) {\n  return Boolean(value?.[symbol]);\n}\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\n\nclass DefaultMultiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor(addr) {\n    _DefaultMultiaddr_string.set(this, void 0);\n\n    _DefaultMultiaddr_tuples.set(this, void 0);\n\n    _DefaultMultiaddr_stringTuples.set(this, void 0);\n\n    this[_a] = true; // default\n\n    if (addr == null) {\n      addr = '';\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n\n      this.bytes = codec.fromString(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n\n  toString() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toOptions() {\n    const codes = this.protoCodes();\n    const parts = this.toString().split('/').slice(1);\n    let transport;\n    let port;\n\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name;\n        port = 443;\n      } else {\n        transport = getProtocol(parts[2]).name;\n        port = parseInt(parts[3]);\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name;\n      port = 443;\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n\n    const opts = {\n      family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    };\n    return opts;\n  }\n\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n  }\n\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes;\n      const p = getProtocol(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n\n    return codes;\n  }\n\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n\n  tuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n  }\n\n  stringTuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n  }\n\n  encapsulate(addr) {\n    addr = new DefaultMultiaddr(addr);\n    return new DefaultMultiaddr(this.toString() + addr.toString());\n  }\n\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n\n    return new DefaultMultiaddr(s.slice(0, i));\n  }\n\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n\n    return this;\n  }\n\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === names.ipfs.code) {\n          return true;\n        }\n\n        return false;\n      }); // Get the last ipfs tuple ['ipfs', 'peerid string']\n\n      const tuple = tuples.pop();\n\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]; // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        } // try to parse peer id as CID\n\n\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  getPath() {\n    let path = null;\n\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = getProtocol(tuple[0]);\n\n        if (proto.path === true) {\n          return true;\n        }\n\n        return false;\n      })[0][1];\n\n      if (path == null) {\n        path = null;\n      }\n    } catch {\n      path = null;\n    }\n\n    return path;\n  }\n\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable); // Multiaddr is not resolvable?\n\n    if (resolvableProto == null) {\n      return [this];\n    }\n\n    const resolver = resolvers.get(resolvableProto.name);\n\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new DefaultMultiaddr(a));\n  }\n\n  nodeAddress() {\n    const options = this.toOptions();\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n\n    if (protos.length !== 2) {\n      return false;\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n\n\n  [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n    return this.inspect();\n  }\n\n  inspect() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n\n}\n/**\n * Static factory\n *\n * @example\n * ```js\n * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\n\n\nexport function multiaddr(addr) {\n  return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };","map":{"version":3,"mappings":"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","names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","DNS_CODES","code","P2P_CODES","resolvers","Map","symbol","fromNodeAddress","addr","transport","Error","ip","family","DefaultMultiaddr","address","port","join","isName","isMultiaddr","protos","some","proto","resolvable","value","Boolean","constructor","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","Uint8Array","bytes","fromBytes","length","charAt","fromString","__classPrivateFieldGet","__classPrivateFieldSet","bytesToString","toJSON","toOptions","codes","protoCodes","parts","split","slice","includes","name","parseInt","opts","host","map","Object","assign","buf","i","decode","n","p","size","sizeForAddr","push","protoNames","tuples","bytesToTuples","stringTuples","tuplesToStringTuples","encapsulate","decapsulate","addrString","s","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","e","getPath","path","resolve","options","resolvableProto","find","resolver","get","addresses","a","nodeAddress","isThinWaistAddress","multiaddr","protocols"],"sourceRoot":"","sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}